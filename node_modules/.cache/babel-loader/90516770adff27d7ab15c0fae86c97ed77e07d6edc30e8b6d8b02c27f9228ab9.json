{"ast":null,"code":"export default {\n  name: 'ChatBot',\n  data() {\n    return {\n      isOpen: false,\n      messages: [{\n        content: '你好！我是AI助手，有什么可以帮你的吗？',\n        type: 'received',\n        time: this.getCurrentTime()\n      }],\n      inputMessage: '',\n      position: {\n        right: '30px',\n        bottom: '30px'\n      },\n      isDragging: false,\n      dragOffset: {\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  methods: {\n    toggleChat() {\n      this.isOpen = !this.isOpen;\n    },\n    getCurrentTime() {\n      const now = new Date();\n      return `${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`;\n    },\n    sendMessage() {\n      if (!this.inputMessage.trim()) return;\n\n      // 添加用户消息\n      this.messages.push({\n        content: this.inputMessage,\n        type: 'sent',\n        time: this.getCurrentTime()\n      });\n\n      // 模拟AI回复\n      setTimeout(() => {\n        this.messages.push({\n          content: `我收到了你的消息：\"${this.inputMessage}\"`,\n          type: 'received',\n          time: this.getCurrentTime()\n        });\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }, 1000);\n      this.inputMessage = '';\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    scrollToBottom() {\n      const container = this.$refs.messageContainer;\n      container.scrollTop = container.scrollHeight;\n    },\n    startDrag(event) {\n      this.isDragging = true;\n      const rect = this.$refs.chatWindow.getBoundingClientRect();\n      this.dragOffset = {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n      document.addEventListener('mousemove', this.onDrag);\n      document.addEventListener('mouseup', this.stopDrag);\n    },\n    onDrag(event) {\n      if (!this.isDragging) return;\n      const x = event.clientX - this.dragOffset.x;\n      const y = event.clientY - this.dragOffset.y;\n\n      // 计算相对于视窗的位置\n      this.position = {\n        left: `${x}px`,\n        top: `${y}px`\n      };\n    },\n    stopDrag() {\n      this.isDragging = false;\n      document.removeEventListener('mousemove', this.onDrag);\n      document.removeEventListener('mouseup', this.stopDrag);\n    }\n  },\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.onDrag);\n    document.removeEventListener('mouseup', this.stopDrag);\n  }\n};","map":{"version":3,"names":["name","data","isOpen","messages","content","type","time","getCurrentTime","inputMessage","position","right","bottom","isDragging","dragOffset","x","y","methods","toggleChat","now","Date","getHours","String","getMinutes","padStart","sendMessage","trim","push","setTimeout","$nextTick","scrollToBottom","container","$refs","messageContainer","scrollTop","scrollHeight","startDrag","event","rect","chatWindow","getBoundingClientRect","clientX","left","clientY","top","document","addEventListener","onDrag","stopDrag","removeEventListener","beforeDestroy"],"sources":["src/components/ChatBot.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 聊天图标 -->\r\n    <div \r\n      v-if=\"!isOpen\" \r\n      class=\"chat-icon\"\r\n      @click=\"toggleChat\"\r\n    >\r\n      <i class=\"fas fa-comments\"></i>\r\n    </div>\r\n\r\n    <!-- 聊天窗口 -->\r\n    <div \r\n      v-show=\"isOpen\" \r\n      class=\"chat-window\"\r\n      :style=\"position\"\r\n      ref=\"chatWindow\"\r\n    >\r\n      <!-- 聊天头部 -->\r\n      <div \r\n        class=\"chat-header\"\r\n        @mousedown=\"startDrag\"\r\n      >\r\n        <span>AI 助手</span>\r\n        <div class=\"header-actions\">\r\n          <button class=\"minimize-btn\" @click=\"toggleChat\">\r\n            <i class=\"fas fa-minus\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 聊天内容区 -->\r\n      <div class=\"chat-messages\" ref=\"messageContainer\">\r\n        <div \r\n          v-for=\"(message, index) in messages\" \r\n          :key=\"index\"\r\n          :class=\"['message', message.type]\"\r\n        >\r\n          <div class=\"message-content\">\r\n            {{ message.content }}\r\n          </div>\r\n          <div class=\"message-time\">{{ message.time }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入区域 -->\r\n      <div class=\"chat-input\">\r\n        <input \r\n          type=\"text\" \r\n          v-model=\"inputMessage\"\r\n          @keyup.enter=\"sendMessage\"\r\n          placeholder=\"输入消息...\"\r\n        >\r\n        <button @click=\"sendMessage\">\r\n          <i class=\"fas fa-paper-plane\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatBot',\r\n  data() {\r\n    return {\r\n      isOpen: false,\r\n      messages: [\r\n        {\r\n          content: '你好！我是AI助手，有什么可以帮你的吗？',\r\n          type: 'received',\r\n          time: this.getCurrentTime()\r\n        }\r\n      ],\r\n      inputMessage: '',\r\n      position: {\r\n        right: '30px',\r\n        bottom: '30px'\r\n      },\r\n      isDragging: false,\r\n      dragOffset: { x: 0, y: 0 }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleChat() {\r\n      this.isOpen = !this.isOpen\r\n    },\r\n    getCurrentTime() {\r\n      const now = new Date()\r\n      return `${now.getHours()}:${String(now.getMinutes()).padStart(2, '0')}`\r\n    },\r\n    sendMessage() {\r\n      if (!this.inputMessage.trim()) return\r\n\r\n      // 添加用户消息\r\n      this.messages.push({\r\n        content: this.inputMessage,\r\n        type: 'sent',\r\n        time: this.getCurrentTime()\r\n      })\r\n\r\n      // 模拟AI回复\r\n      setTimeout(() => {\r\n        this.messages.push({\r\n          content: `我收到了你的消息：\"${this.inputMessage}\"`,\r\n          type: 'received',\r\n          time: this.getCurrentTime()\r\n        })\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom()\r\n        })\r\n      }, 1000)\r\n\r\n      this.inputMessage = ''\r\n      this.$nextTick(() => {\r\n        this.scrollToBottom()\r\n      })\r\n    },\r\n    scrollToBottom() {\r\n      const container = this.$refs.messageContainer\r\n      container.scrollTop = container.scrollHeight\r\n    },\r\n    startDrag(event) {\r\n      this.isDragging = true\r\n      const rect = this.$refs.chatWindow.getBoundingClientRect()\r\n      this.dragOffset = {\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top\r\n      }\r\n      document.addEventListener('mousemove', this.onDrag)\r\n      document.addEventListener('mouseup', this.stopDrag)\r\n    },\r\n    onDrag(event) {\r\n      if (!this.isDragging) return\r\n\r\n      const x = event.clientX - this.dragOffset.x\r\n      const y = event.clientY - this.dragOffset.y\r\n\r\n      // 计算相对于视窗的位置\r\n      this.position = {\r\n        left: `${x}px`,\r\n        top: `${y}px`\r\n      }\r\n    },\r\n    stopDrag() {\r\n      this.isDragging = false\r\n      document.removeEventListener('mousemove', this.onDrag)\r\n      document.removeEventListener('mouseup', this.stopDrag)\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('mousemove', this.onDrag)\r\n    document.removeEventListener('mouseup', this.stopDrag)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-icon {\r\n  position: fixed;\r\n  right: 30px;\r\n  bottom: 30px;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: var(--primary-color);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  transition: all 0.3s ease;\r\n  z-index: 1000;\r\n}\r\n\r\n.chat-icon i {\r\n  color: white;\r\n  font-size: 24px;\r\n}\r\n\r\n.chat-icon:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.chat-window {\r\n  position: fixed;\r\n  width: 350px;\r\n  height: 500px;\r\n  background: white;\r\n  border-radius: 15px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  z-index: 1000;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chat-header {\r\n  padding: 15px 20px;\r\n  background: var(--primary-color);\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.minimize-btn {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.minimize-btn:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 15px;\r\n  max-width: 80%;\r\n}\r\n\r\n.message.sent {\r\n  margin-left: auto;\r\n}\r\n\r\n.message-content {\r\n  padding: 10px 15px;\r\n  border-radius: 15px;\r\n  background: white;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.message.sent .message-content {\r\n  background: var(--primary-color);\r\n  color: white;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8em;\r\n  color: #666;\r\n  margin-top: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  padding: 15px;\r\n  background: white;\r\n  border-top: 1px solid #eee;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.chat-input input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chat-input input:focus {\r\n  border-color: var(--primary-color);\r\n  box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.1);\r\n}\r\n\r\n.chat-input button {\r\n  padding: 10px 15px;\r\n  background: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chat-input button:hover {\r\n  background: var(--primary-dark);\r\n  transform: translateX(2px);\r\n}\r\n</style> "],"mappings":"AA8DA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,QAAA,GACA;QACAC,OAAA;QACAC,IAAA;QACAC,IAAA,OAAAC,cAAA;MACA,EACA;MACAC,YAAA;MACAC,QAAA;QACAC,KAAA;QACAC,MAAA;MACA;MACAC,UAAA;MACAC,UAAA;QAAAC,CAAA;QAAAC,CAAA;MAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,KAAAf,MAAA,SAAAA,MAAA;IACA;IACAK,eAAA;MACA,MAAAW,GAAA,OAAAC,IAAA;MACA,UAAAD,GAAA,CAAAE,QAAA,MAAAC,MAAA,CAAAH,GAAA,CAAAI,UAAA,IAAAC,QAAA;IACA;IACAC,YAAA;MACA,UAAAhB,YAAA,CAAAiB,IAAA;;MAEA;MACA,KAAAtB,QAAA,CAAAuB,IAAA;QACAtB,OAAA,OAAAI,YAAA;QACAH,IAAA;QACAC,IAAA,OAAAC,cAAA;MACA;;MAEA;MACAoB,UAAA;QACA,KAAAxB,QAAA,CAAAuB,IAAA;UACAtB,OAAA,oBAAAI,YAAA;UACAH,IAAA;UACAC,IAAA,OAAAC,cAAA;QACA;QACA,KAAAqB,SAAA;UACA,KAAAC,cAAA;QACA;MACA;MAEA,KAAArB,YAAA;MACA,KAAAoB,SAAA;QACA,KAAAC,cAAA;MACA;IACA;IACAA,eAAA;MACA,MAAAC,SAAA,QAAAC,KAAA,CAAAC,gBAAA;MACAF,SAAA,CAAAG,SAAA,GAAAH,SAAA,CAAAI,YAAA;IACA;IACAC,UAAAC,KAAA;MACA,KAAAxB,UAAA;MACA,MAAAyB,IAAA,QAAAN,KAAA,CAAAO,UAAA,CAAAC,qBAAA;MACA,KAAA1B,UAAA;QACAC,CAAA,EAAAsB,KAAA,CAAAI,OAAA,GAAAH,IAAA,CAAAI,IAAA;QACA1B,CAAA,EAAAqB,KAAA,CAAAM,OAAA,GAAAL,IAAA,CAAAM;MACA;MACAC,QAAA,CAAAC,gBAAA,mBAAAC,MAAA;MACAF,QAAA,CAAAC,gBAAA,iBAAAE,QAAA;IACA;IACAD,OAAAV,KAAA;MACA,UAAAxB,UAAA;MAEA,MAAAE,CAAA,GAAAsB,KAAA,CAAAI,OAAA,QAAA3B,UAAA,CAAAC,CAAA;MACA,MAAAC,CAAA,GAAAqB,KAAA,CAAAM,OAAA,QAAA7B,UAAA,CAAAE,CAAA;;MAEA;MACA,KAAAN,QAAA;QACAgC,IAAA,KAAA3B,CAAA;QACA6B,GAAA,KAAA5B,CAAA;MACA;IACA;IACAgC,SAAA;MACA,KAAAnC,UAAA;MACAgC,QAAA,CAAAI,mBAAA,mBAAAF,MAAA;MACAF,QAAA,CAAAI,mBAAA,iBAAAD,QAAA;IACA;EACA;EACAE,cAAA;IACAL,QAAA,CAAAI,mBAAA,mBAAAF,MAAA;IACAF,QAAA,CAAAI,mBAAA,iBAAAD,QAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}