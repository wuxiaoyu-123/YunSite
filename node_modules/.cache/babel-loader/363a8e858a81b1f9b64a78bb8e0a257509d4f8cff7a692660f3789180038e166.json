{"ast":null,"code":"export default {\n  name: 'ChatBot',\n  data() {\n    return {\n      isOpen: false,\n      messages: [{\n        content: '你好！我是AI助手,有什么可以帮你的吗?',\n        type: 'received',\n        time: this.getCurrentTime()\n      }],\n      inputMessage: '',\n      position: {\n        right: '30px',\n        bottom: '30px'\n      },\n      isDragging: false,\n      dragOffset: {\n        x: 0,\n        y: 0\n      },\n      isTyping: false,\n      inputRows: 1,\n      maxRows: 5,\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight,\n      initialPosition: null\n    };\n  },\n  computed: {\n    chatWindowStyle() {\n      return {\n        ...this.position,\n        transform: this.isDragging ? 'scale(0.98)' : 'scale(1)',\n        transition: this.isDragging ? 'transform 0.2s' : 'all 0.3s ease'\n      };\n    }\n  },\n  methods: {\n    toggleChat() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$nextTick(() => {\n          this.$refs.inputArea?.focus();\n        });\n      }\n    },\n    getCurrentTime() {\n      const now = new Date();\n      return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n    },\n    async typeMessage(message) {\n      this.isTyping = true;\n      let displayText = '';\n      const words = message.split('');\n      for (let i = 0; i < words.length; i++) {\n        displayText += words[i];\n        this.messages[this.messages.length - 1].content = displayText;\n        await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 50));\n      }\n      this.isTyping = false;\n    },\n    newLine(e) {\n      e.preventDefault();\n      this.inputMessage += '\\n';\n      this.adjustTextarea();\n    },\n    adjustTextarea() {\n      const textarea = this.$refs.inputArea;\n      if (textarea) {\n        textarea.style.height = 'auto';\n        textarea.style.height = Math.min(textarea.scrollHeight, this.maxRows * 20) + 'px';\n        this.inputRows = Math.min(Math.floor(textarea.scrollHeight / 20), this.maxRows);\n      }\n    },\n    async sendMessage(e) {\n      if (e) e.preventDefault();\n      if (!this.inputMessage.trim() || this.isTyping) return;\n\n      // 添加用户消息\n      const userMessage = this.inputMessage.trim();\n      this.messages.push({\n        content: userMessage.replace(/\\n/g, '<br>'),\n        type: 'sent',\n        time: this.getCurrentTime()\n      });\n      this.inputMessage = '';\n      this.adjustTextarea();\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n\n      // 添加空的AI回复消息\n      this.messages.push({\n        content: '',\n        type: 'received',\n        time: this.getCurrentTime()\n      });\n\n      // 模拟AI回复\n      const responses = [`我理解你的问题是关于\"${userMessage}\"。让我来帮你解答。`, '这是一个很好的问题！让我详细解释一。', '我明白你的意思了。这个问题的关键在于...', '根据我的理解，你想知道的是...', '这个问题很有趣！让我从以下几个方面来回答：'];\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n      await this.typeMessage(randomResponse);\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    scrollToBottom() {\n      const container = this.$refs.messageContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    handleResize() {\n      this.windowWidth = window.innerWidth;\n      this.windowHeight = window.innerHeight;\n      this.ensureWindowInBounds();\n    },\n    ensureWindowInBounds() {\n      if (!this.$refs.chatWindow) return;\n      const rect = this.$refs.chatWindow.getBoundingClientRect();\n      const padding = 10; // 距离边界的最小距离\n\n      // 如果窗口超出右边界\n      if (rect.right > this.windowWidth - padding) {\n        this.position.left = `${this.windowWidth - rect.width - padding}px`;\n        delete this.position.right;\n      }\n\n      // 如果窗口超出左边界\n      if (rect.left < padding) {\n        this.position.left = `${padding}px`;\n      }\n\n      // 如果窗口超出底部边界\n      if (rect.bottom > this.windowHeight - padding) {\n        this.position.top = `${this.windowHeight - rect.height - padding}px`;\n        delete this.position.bottom;\n      }\n\n      // 如果窗口超出顶部边界\n      if (rect.top < padding) {\n        this.position.top = `${padding}px`;\n      }\n    },\n    startDrag(event) {\n      if (event.target.closest('.minimize-btn') || event.button !== 0) return;\n      this.isDragging = true;\n      const rect = this.$refs.chatWindow.getBoundingClientRect();\n      this.dragOffset = {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n\n      // 记录初始位置\n      this.initialPosition = {\n        ...this.position\n      };\n\n      // 添加临时的全局样式\n      document.body.style.userSelect = 'none';\n      document.body.style.cursor = 'move';\n      document.addEventListener('mousemove', this.onDrag);\n      document.addEventListener('mouseup', this.stopDrag);\n    },\n    onDrag(event) {\n      if (!this.isDragging) return;\n      requestAnimationFrame(() => {\n        const x = event.clientX - this.dragOffset.x;\n        const y = event.clientY - this.dragOffset.y;\n        const padding = 10;\n\n        // 限制在可视区域内\n        const maxX = this.windowWidth - this.$refs.chatWindow.offsetWidth - padding;\n        const maxY = this.windowHeight - this.$refs.chatWindow.offsetHeight - padding;\n        const boundedX = Math.max(padding, Math.min(x, maxX));\n        const boundedY = Math.max(padding, Math.min(y, maxY));\n\n        // 更新位置\n        this.position = {\n          left: `${boundedX}px`,\n          top: `${boundedY}px`\n        };\n\n        // 移除right和bottom属性\n        delete this.position.right;\n        delete this.position.bottom;\n      });\n    },\n    stopDrag() {\n      if (!this.isDragging) return;\n      this.isDragging = false;\n\n      // 移除临时的全局样式\n      document.body.style.userSelect = '';\n      document.body.style.cursor = '';\n\n      // 检查是否需要吸附到边缘\n      this.snapToEdges();\n      document.removeEventListener('mousemove', this.onDrag);\n      document.removeEventListener('mouseup', this.stopDrag);\n    },\n    snapToEdges() {\n      const rect = this.$refs.chatWindow.getBoundingClientRect();\n      const snapThreshold = 20; // 吸附阈值\n      const padding = 10;\n\n      // 吸附到右边\n      if (this.windowWidth - rect.right < snapThreshold) {\n        this.position = {\n          right: `${padding}px`,\n          top: `${rect.top}px`\n        };\n      }\n      // 吸附到左边\n      else if (rect.left < snapThreshold) {\n        this.position = {\n          left: `${padding}px`,\n          top: `${rect.top}px`\n        };\n      }\n      // 吸附到底部\n      if (this.windowHeight - rect.bottom < snapThreshold) {\n        this.position = {\n          ...(this.position.left ? {\n            left: this.position.left\n          } : {\n            right: this.position.right\n          }),\n          bottom: `${padding}px`\n        };\n        delete this.position.top;\n      }\n    }\n  },\n  mounted() {\n    // 添加窗口大小改变监听\n    window.addEventListener('resize', this.handleResize);\n\n    // 添加键盘快捷键\n    document.addEventListener('keydown', e => {\n      if (e.ctrlKey && e.key === '/') {\n        e.preventDefault();\n        this.toggleChat();\n      }\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n    document.removeEventListener('mousemove', this.onDrag);\n    document.removeEventListener('mouseup', this.stopDrag);\n  }\n};","map":{"version":3,"names":["name","data","isOpen","messages","content","type","time","getCurrentTime","inputMessage","position","right","bottom","isDragging","dragOffset","x","y","isTyping","inputRows","maxRows","windowWidth","window","innerWidth","windowHeight","innerHeight","initialPosition","computed","chatWindowStyle","transform","transition","methods","toggleChat","$nextTick","$refs","inputArea","focus","now","Date","String","getHours","padStart","getMinutes","typeMessage","message","displayText","words","split","i","length","Promise","resolve","setTimeout","Math","random","newLine","e","preventDefault","adjustTextarea","textarea","style","height","min","scrollHeight","floor","sendMessage","trim","userMessage","push","replace","scrollToBottom","responses","randomResponse","container","messageContainer","scrollTop","handleResize","ensureWindowInBounds","chatWindow","rect","getBoundingClientRect","padding","left","width","top","startDrag","event","target","closest","button","clientX","clientY","document","body","userSelect","cursor","addEventListener","onDrag","stopDrag","requestAnimationFrame","maxX","offsetWidth","maxY","offsetHeight","boundedX","max","boundedY","snapToEdges","removeEventListener","snapThreshold","mounted","ctrlKey","key","beforeDestroy"],"sources":["src/components/ChatBot.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 聊天图标 -->\r\n    <div \r\n      v-show=\"!isOpen\" \r\n      class=\"chat-icon\"\r\n      @click=\"toggleChat\"\r\n    >\r\n      <el-avatar :size=\"40\" src=\"https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png\"></el-avatar>\r\n    </div>\r\n\r\n    <!-- 聊天窗口 -->\r\n    <div \r\n      v-show=\"isOpen\" \r\n      class=\"chat-window\"\r\n      :class=\"{ 'is-dragging': isDragging }\"\r\n      :style=\"chatWindowStyle\"\r\n      ref=\"chatWindow\"\r\n    >\r\n      <!-- 聊天头部 -->\r\n      <div \r\n        class=\"chat-header\"\r\n        @mousedown.prevent=\"startDrag\"\r\n      >\r\n        <div class=\"header-left\">\r\n          <el-avatar :size=\"30\" src=\"https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png\"></el-avatar>\r\n          <span>AI 助手</span>\r\n          <div class=\"typing-indicator\" v-if=\"isTyping\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n          <button class=\"minimize-btn\" @click.stop=\"toggleChat\">\r\n            <i class=\"el-icon-minus\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 聊天内容区 -->\r\n      <div class=\"chat-messages\" ref=\"messageContainer\">\r\n        <div \r\n          v-for=\"(message, index) in messages\" \r\n          :key=\"index\"\r\n          :class=\"['message', message.type]\"\r\n        >\r\n          <div class=\"message-avatar\">\r\n            <el-avatar \r\n              :size=\"36\" \r\n              :src=\"message.type === 'sent' ? 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png' : 'https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png'\"\r\n            ></el-avatar>\r\n          </div>\r\n          <div class=\"message-wrapper\">\r\n            <div class=\"message-content\" v-html=\"message.content\"></div>\r\n            <div class=\"message-time\">{{ message.time }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入区域 -->\r\n      <div class=\"chat-input\">\r\n        <textarea \r\n          ref=\"inputArea\"\r\n          v-model=\"inputMessage\"\r\n          @keyup.enter.exact.prevent=\"sendMessage\"\r\n          @keyup.enter.shift.exact=\"newLine\"\r\n          placeholder=\"输入消息... (Shift + Enter 换行)\"\r\n          :rows=\"inputRows\"\r\n          @input=\"adjustTextarea\"\r\n        ></textarea>\r\n        <button @click=\"sendMessage\" :disabled=\"isTyping || !inputMessage.trim()\">\r\n          <i class=\"el-icon-position\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatBot',\r\n  data() {\r\n    return {\r\n      isOpen: false,\r\n      messages: [\r\n        {\r\n          content: '你好！我是AI助手,有什么可以帮你的吗?',\r\n          type: 'received',\r\n          time: this.getCurrentTime()\r\n        }\r\n      ],\r\n      inputMessage: '',\r\n      position: {\r\n        right: '30px',\r\n        bottom: '30px'\r\n      },\r\n      isDragging: false,\r\n      dragOffset: { x: 0, y: 0 },\r\n      isTyping: false,\r\n      inputRows: 1,\r\n      maxRows: 5,\r\n      windowWidth: window.innerWidth,\r\n      windowHeight: window.innerHeight,\r\n      initialPosition: null\r\n    }\r\n  },\r\n  computed: {\r\n    chatWindowStyle() {\r\n      return {\r\n        ...this.position,\r\n        transform: this.isDragging ? 'scale(0.98)' : 'scale(1)',\r\n        transition: this.isDragging ? 'transform 0.2s' : 'all 0.3s ease'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    toggleChat() {\r\n      this.isOpen = !this.isOpen\r\n      if (this.isOpen) {\r\n        this.$nextTick(() => {\r\n          this.$refs.inputArea?.focus()\r\n        })\r\n      }\r\n    },\r\n    getCurrentTime() {\r\n      const now = new Date()\r\n      return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`\r\n    },\r\n    async typeMessage(message) {\r\n      this.isTyping = true\r\n      let displayText = ''\r\n      const words = message.split('')\r\n      \r\n      for (let i = 0; i < words.length; i++) {\r\n        displayText += words[i]\r\n        this.messages[this.messages.length - 1].content = displayText\r\n        await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 50))\r\n      }\r\n      this.isTyping = false\r\n    },\r\n    newLine(e) {\r\n      e.preventDefault()\r\n      this.inputMessage += '\\n'\r\n      this.adjustTextarea()\r\n    },\r\n    adjustTextarea() {\r\n      const textarea = this.$refs.inputArea\r\n      if (textarea) {\r\n        textarea.style.height = 'auto'\r\n        textarea.style.height = Math.min(textarea.scrollHeight, this.maxRows * 20) + 'px'\r\n        this.inputRows = Math.min(Math.floor(textarea.scrollHeight / 20), this.maxRows)\r\n      }\r\n    },\r\n    async sendMessage(e) {\r\n      if (e) e.preventDefault()\r\n      if (!this.inputMessage.trim() || this.isTyping) return\r\n\r\n      // 添加用户消息\r\n      const userMessage = this.inputMessage.trim()\r\n      this.messages.push({\r\n        content: userMessage.replace(/\\n/g, '<br>'),\r\n        type: 'sent',\r\n        time: this.getCurrentTime()\r\n      })\r\n\r\n      this.inputMessage = ''\r\n      this.adjustTextarea()\r\n      this.$nextTick(() => {\r\n        this.scrollToBottom()\r\n      })\r\n\r\n      // 添加空的AI回复消息\r\n      this.messages.push({\r\n        content: '',\r\n        type: 'received',\r\n        time: this.getCurrentTime()\r\n      })\r\n\r\n      // 模拟AI回复\r\n      const responses = [\r\n        `我理解你的问题是关于\"${userMessage}\"。让我来帮你解答。`,\r\n        '这是一个很好的问题！让我详细解释一。',\r\n        '我明白你的意思了。这个问题的关键在于...',\r\n        '根据我的理解，你想知道的是...',\r\n        '这个问题很有趣！让我从以下几个方面来回答：'\r\n      ]\r\n      \r\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)]\r\n      await this.typeMessage(randomResponse)\r\n      \r\n      this.$nextTick(() => {\r\n        this.scrollToBottom()\r\n      })\r\n    },\r\n    scrollToBottom() {\r\n      const container = this.$refs.messageContainer\r\n      if (container) {\r\n        container.scrollTop = container.scrollHeight\r\n      }\r\n    },\r\n    handleResize() {\r\n      this.windowWidth = window.innerWidth\r\n      this.windowHeight = window.innerHeight\r\n      this.ensureWindowInBounds()\r\n    },\r\n    ensureWindowInBounds() {\r\n      if (!this.$refs.chatWindow) return\r\n\r\n      const rect = this.$refs.chatWindow.getBoundingClientRect()\r\n      const padding = 10 // 距离边界的最小距离\r\n\r\n      // 如果窗口超出右边界\r\n      if (rect.right > this.windowWidth - padding) {\r\n        this.position.left = `${this.windowWidth - rect.width - padding}px`\r\n        delete this.position.right\r\n      }\r\n\r\n      // 如果窗口超出左边界\r\n      if (rect.left < padding) {\r\n        this.position.left = `${padding}px`\r\n      }\r\n\r\n      // 如果窗口超出底部边界\r\n      if (rect.bottom > this.windowHeight - padding) {\r\n        this.position.top = `${this.windowHeight - rect.height - padding}px`\r\n        delete this.position.bottom\r\n      }\r\n\r\n      // 如果窗口超出顶部边界\r\n      if (rect.top < padding) {\r\n        this.position.top = `${padding}px`\r\n      }\r\n    },\r\n    startDrag(event) {\r\n      if (event.target.closest('.minimize-btn') || event.button !== 0) return\r\n      \r\n      this.isDragging = true\r\n      const rect = this.$refs.chatWindow.getBoundingClientRect()\r\n      this.dragOffset = {\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top\r\n      }\r\n\r\n      // 记录初始位置\r\n      this.initialPosition = { ...this.position }\r\n\r\n      // 添加临时的全局样式\r\n      document.body.style.userSelect = 'none'\r\n      document.body.style.cursor = 'move'\r\n\r\n      document.addEventListener('mousemove', this.onDrag)\r\n      document.addEventListener('mouseup', this.stopDrag)\r\n    },\r\n    onDrag(event) {\r\n      if (!this.isDragging) return\r\n\r\n      requestAnimationFrame(() => {\r\n        const x = event.clientX - this.dragOffset.x\r\n        const y = event.clientY - this.dragOffset.y\r\n        const padding = 10\r\n\r\n        // 限制在可视区域内\r\n        const maxX = this.windowWidth - this.$refs.chatWindow.offsetWidth - padding\r\n        const maxY = this.windowHeight - this.$refs.chatWindow.offsetHeight - padding\r\n\r\n        const boundedX = Math.max(padding, Math.min(x, maxX))\r\n        const boundedY = Math.max(padding, Math.min(y, maxY))\r\n\r\n        // 更新位置\r\n        this.position = {\r\n          left: `${boundedX}px`,\r\n          top: `${boundedY}px`\r\n        }\r\n\r\n        // 移除right和bottom属性\r\n        delete this.position.right\r\n        delete this.position.bottom\r\n      })\r\n    },\r\n    stopDrag() {\r\n      if (!this.isDragging) return\r\n\r\n      this.isDragging = false\r\n      \r\n      // 移除临时的全局样式\r\n      document.body.style.userSelect = ''\r\n      document.body.style.cursor = ''\r\n\r\n      // 检查是否需要吸附到边缘\r\n      this.snapToEdges()\r\n\r\n      document.removeEventListener('mousemove', this.onDrag)\r\n      document.removeEventListener('mouseup', this.stopDrag)\r\n    },\r\n    snapToEdges() {\r\n      const rect = this.$refs.chatWindow.getBoundingClientRect()\r\n      const snapThreshold = 20 // 吸附阈值\r\n      const padding = 10\r\n\r\n      // 吸附到右边\r\n      if (this.windowWidth - rect.right < snapThreshold) {\r\n        this.position = {\r\n          right: `${padding}px`,\r\n          top: `${rect.top}px`\r\n        }\r\n      }\r\n      // 吸附到左边\r\n      else if (rect.left < snapThreshold) {\r\n        this.position = {\r\n          left: `${padding}px`,\r\n          top: `${rect.top}px`\r\n        }\r\n      }\r\n      // 吸附到底部\r\n      if (this.windowHeight - rect.bottom < snapThreshold) {\r\n        this.position = {\r\n          ...(this.position.left ? { left: this.position.left } : { right: this.position.right }),\r\n          bottom: `${padding}px`\r\n        }\r\n        delete this.position.top\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // 添加窗口大小改变监听\r\n    window.addEventListener('resize', this.handleResize)\r\n\r\n    // 添加键盘快捷键\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.ctrlKey && e.key === '/') {\r\n        e.preventDefault()\r\n        this.toggleChat()\r\n      }\r\n    })\r\n  },\r\n  beforeDestroy() {\r\n    window.removeEventListener('resize', this.handleResize)\r\n    document.removeEventListener('mousemove', this.onDrag)\r\n    document.removeEventListener('mouseup', this.stopDrag)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-icon {\r\n  position: fixed;\r\n  right: 30px;\r\n  bottom: 30px;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: white;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\r\n              box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  z-index: 1000;\r\n  padding: 10px;\r\n}\r\n\r\n.chat-icon:hover {\r\n  transform: translateY(-2px) scale(1.05);\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.chat-icon:active {\r\n  transform: translateY(-1px) scale(0.98);\r\n}\r\n\r\n.chat-window {\r\n  position: fixed;\r\n  width: 350px;\r\n  height: 500px;\r\n  background: white;\r\n  border-radius: 15px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  z-index: 1000;\r\n  will-change: transform;\r\n  touch-action: none;\r\n  user-select: none;\r\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),\r\n              opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n.chat-window.is-dragging {\r\n  transition: none;\r\n  cursor: move;\r\n}\r\n\r\n.chat-header {\r\n  padding: 15px 20px;\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n  user-select: none;\r\n  position: relative;\r\n}\r\n\r\n.chat-header::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  opacity: 0;\r\n  transition: opacity 0.2s;\r\n}\r\n\r\n.chat-header:hover::after {\r\n  opacity: 1;\r\n}\r\n\r\n.chat-header:active::after {\r\n  background: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.minimize-btn {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  cursor: pointer;\r\n  padding: 8px;\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 4px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.minimize-btn:hover {\r\n  background: rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.minimize-btn:active {\r\n  background: rgba(255, 255, 255, 0.2);\r\n  transform: scale(0.95);\r\n}\r\n\r\n.minimize-btn i {\r\n  font-size: 18px;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n  max-width: 100%;\r\n}\r\n\r\n.message.sent {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-avatar {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-wrapper {\r\n  max-width: calc(100% - 46px);\r\n}\r\n\r\n.message-content {\r\n  padding: 12px 16px;\r\n  border-radius: 15px;\r\n  background: white;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\r\n  word-break: break-word;\r\n  line-height: 1.5;\r\n}\r\n\r\n.message.sent .message-content {\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8em;\r\n  color: #666;\r\n  margin-top: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  padding: 15px;\r\n  background: white;\r\n  border-top: 1px solid #eee;\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: flex-end;\r\n}\r\n\r\n.chat-input textarea {\r\n  flex: 1;\r\n  padding: 10px 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: all 0.3s ease;\r\n  resize: none;\r\n  min-height: 40px;\r\n  max-height: 120px;\r\n  line-height: 1.5;\r\n  font-size: 14px;\r\n}\r\n\r\n.chat-input textarea:focus {\r\n  border-color: var(--primary-color, #1a73e8);\r\n  box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.1);\r\n}\r\n\r\n.chat-input button {\r\n  padding: 10px 15px;\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  height: 40px;\r\n  min-width: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.chat-input button:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.chat-input button:not(:disabled):hover {\r\n  background: var(--primary-dark, #1557b0);\r\n  transform: translateX(2px);\r\n}\r\n\r\n.typing-indicator {\r\n  display: flex;\r\n  gap: 4px;\r\n  padding: 0 8px;\r\n}\r\n\r\n.typing-indicator span {\r\n  width: 4px;\r\n  height: 4px;\r\n  background: rgba(255, 255, 255, 0.7);\r\n  border-radius: 50%;\r\n  animation: typing 1s infinite ease-in-out;\r\n}\r\n\r\n.typing-indicator span:nth-child(1) { animation-delay: 0.2s; }\r\n.typing-indicator span:nth-child(2) { animation-delay: 0.3s; }\r\n.typing-indicator span:nth-child(3) { animation-delay: 0.4s; }\r\n\r\n@keyframes typing {\r\n  0%, 100% { transform: translateY(0); }\r\n  50% { transform: translateY(-5px); }\r\n}\r\n\r\n.mr-2 {\r\n  margin-right: 8px;\r\n}\r\n\r\n/* 滚动条样式 */\r\n.chat-messages::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb {\r\n  background: #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb:hover {\r\n  background: #999;\r\n}\r\n\r\n/* 添加拖拽时的视觉反馈 */\r\n@keyframes pulse {\r\n  0% { transform: scale(1); }\r\n  50% { transform: scale(0.98); }\r\n  100% { transform: scale(1); }\r\n}\r\n\r\n.isDragging {\r\n  animation: pulse 1s ease infinite;\r\n  opacity: 0.98;\r\n  cursor: move !important;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}