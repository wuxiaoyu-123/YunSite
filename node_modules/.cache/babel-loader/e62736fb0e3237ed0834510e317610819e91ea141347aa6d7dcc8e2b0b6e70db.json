{"ast":null,"code":"export default {\n  name: 'ChatBot',\n  data() {\n    return {\n      isOpen: false,\n      messages: [{\n        content: '你好！我是AI助手,有什么可以帮你的吗?',\n        type: 'received',\n        time: this.getCurrentTime()\n      }],\n      inputMessage: '',\n      position: {\n        right: '30px',\n        bottom: '30px'\n      },\n      isDragging: false,\n      dragOffset: {\n        x: 0,\n        y: 0\n      },\n      isTyping: false,\n      inputRows: 1,\n      maxRows: 5\n    };\n  },\n  methods: {\n    toggleChat() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$nextTick(() => {\n          this.$refs.inputArea?.focus();\n        });\n      }\n    },\n    getCurrentTime() {\n      const now = new Date();\n      return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`;\n    },\n    async typeMessage(message) {\n      this.isTyping = true;\n      let displayText = '';\n      const words = message.split('');\n      for (let i = 0; i < words.length; i++) {\n        displayText += words[i];\n        this.messages[this.messages.length - 1].content = displayText;\n        await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 50));\n      }\n      this.isTyping = false;\n    },\n    newLine(e) {\n      e.preventDefault();\n      this.inputMessage += '\\n';\n      this.adjustTextarea();\n    },\n    adjustTextarea() {\n      const textarea = this.$refs.inputArea;\n      if (textarea) {\n        textarea.style.height = 'auto';\n        textarea.style.height = Math.min(textarea.scrollHeight, this.maxRows * 20) + 'px';\n        this.inputRows = Math.min(Math.floor(textarea.scrollHeight / 20), this.maxRows);\n      }\n    },\n    async sendMessage(e) {\n      if (e) e.preventDefault();\n      if (!this.inputMessage.trim() || this.isTyping) return;\n\n      // 添加用户消息\n      const userMessage = this.inputMessage.trim();\n      this.messages.push({\n        content: userMessage.replace(/\\n/g, '<br>'),\n        type: 'sent',\n        time: this.getCurrentTime()\n      });\n      this.inputMessage = '';\n      this.adjustTextarea();\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n\n      // 添加空的AI回复消息\n      this.messages.push({\n        content: '',\n        type: 'received',\n        time: this.getCurrentTime()\n      });\n\n      // 模拟AI回复\n      const responses = [`我理解你的问题是关于\"${userMessage}\"。让我来帮你解答。`, '这是一个很好的问题！让我详细解释一���。', '我明白你的意思了。这个问题的关键在于...', '根据我的理解，你想知道的是...', '这个问题很有趣！让我从以下几个方面来回答：'];\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n      await this.typeMessage(randomResponse);\n      this.$nextTick(() => {\n        this.scrollToBottom();\n      });\n    },\n    scrollToBottom() {\n      const container = this.$refs.messageContainer;\n      if (container) {\n        container.scrollTop = container.scrollHeight;\n      }\n    },\n    startDrag(event) {\n      if (event.target.closest('.minimize-btn')) return;\n      this.isDragging = true;\n      const rect = this.$refs.chatWindow.getBoundingClientRect();\n      this.dragOffset = {\n        x: event.clientX - rect.left,\n        y: event.clientY - rect.top\n      };\n      document.addEventListener('mousemove', this.onDrag);\n      document.addEventListener('mouseup', this.stopDrag);\n    },\n    onDrag(event) {\n      if (!this.isDragging) return;\n      const x = event.clientX - this.dragOffset.x;\n      const y = event.clientY - this.dragOffset.y;\n\n      // 计算相对于视窗的位置\n      this.position = {\n        left: `${Math.max(0, Math.min(x, window.innerWidth - 350))}px`,\n        top: `${Math.max(0, Math.min(y, window.innerHeight - 500))}px`\n      };\n    },\n    stopDrag() {\n      this.isDragging = false;\n      document.removeEventListener('mousemove', this.onDrag);\n      document.removeEventListener('mouseup', this.stopDrag);\n    }\n  },\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.onDrag);\n    document.removeEventListener('mouseup', this.stopDrag);\n  },\n  mounted() {\n    // 添加键盘快捷键\n    document.addEventListener('keydown', e => {\n      if (e.ctrlKey && e.key === '/') {\n        e.preventDefault();\n        this.toggleChat();\n      }\n    });\n  }\n};","map":{"version":3,"names":["name","data","isOpen","messages","content","type","time","getCurrentTime","inputMessage","position","right","bottom","isDragging","dragOffset","x","y","isTyping","inputRows","maxRows","methods","toggleChat","$nextTick","$refs","inputArea","focus","now","Date","String","getHours","padStart","getMinutes","typeMessage","message","displayText","words","split","i","length","Promise","resolve","setTimeout","Math","random","newLine","e","preventDefault","adjustTextarea","textarea","style","height","min","scrollHeight","floor","sendMessage","trim","userMessage","push","replace","scrollToBottom","responses","randomResponse","container","messageContainer","scrollTop","startDrag","event","target","closest","rect","chatWindow","getBoundingClientRect","clientX","left","clientY","top","document","addEventListener","onDrag","stopDrag","max","window","innerWidth","innerHeight","removeEventListener","beforeDestroy","mounted","ctrlKey","key"],"sources":["src/components/ChatBot.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 聊天图标 -->\r\n    <div \r\n      v-if=\"!isOpen\" \r\n      class=\"chat-icon\"\r\n      @click=\"toggleChat\"\r\n    >\r\n      <el-avatar :size=\"40\" src=\"https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png\"></el-avatar>\r\n    </div>\r\n\r\n    <!-- 聊天窗口 -->\r\n    <div \r\n      v-if=\"isOpen\" \r\n      class=\"chat-window\"\r\n      :style=\"position\"\r\n      ref=\"chatWindow\"\r\n    >\r\n      <!-- 聊天头部 -->\r\n      <div \r\n        class=\"chat-header\"\r\n        @mousedown=\"startDrag\"\r\n      >\r\n        <div class=\"header-left\">\r\n          <el-avatar :size=\"30\" src=\"https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png\"></el-avatar>\r\n          <span>AI 助手</span>\r\n          <div class=\"typing-indicator\" v-if=\"isTyping\">\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n          </div>\r\n        </div>\r\n        <div class=\"header-actions\">\r\n          <button class=\"minimize-btn\" @click=\"toggleChat\">\r\n            <i class=\"el-icon-minus\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 聊天内容区 -->\r\n      <div class=\"chat-messages\" ref=\"messageContainer\">\r\n        <div \r\n          v-for=\"(message, index) in messages\" \r\n          :key=\"index\"\r\n          :class=\"['message', message.type]\"\r\n        >\r\n          <div class=\"message-avatar\">\r\n            <el-avatar \r\n              :size=\"36\" \r\n              :src=\"message.type === 'sent' ? 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png' : 'https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png'\"\r\n            ></el-avatar>\r\n          </div>\r\n          <div class=\"message-wrapper\">\r\n            <div class=\"message-content\" v-html=\"message.content\"></div>\r\n            <div class=\"message-time\">{{ message.time }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 输入区域 -->\r\n      <div class=\"chat-input\">\r\n        <textarea \r\n          ref=\"inputArea\"\r\n          v-model=\"inputMessage\"\r\n          @keyup.enter.exact.prevent=\"sendMessage\"\r\n          @keyup.enter.shift.exact=\"newLine\"\r\n          placeholder=\"输入消息... (Shift + Enter 换行)\"\r\n          :rows=\"inputRows\"\r\n          @input=\"adjustTextarea\"\r\n        ></textarea>\r\n        <button @click=\"sendMessage\" :disabled=\"isTyping || !inputMessage.trim()\">\r\n          <i class=\"el-icon-position\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ChatBot',\r\n  data() {\r\n    return {\r\n      isOpen: false,\r\n      messages: [\r\n        {\r\n          content: '你好！我是AI助手,有什么可以帮你的吗?',\r\n          type: 'received',\r\n          time: this.getCurrentTime()\r\n        }\r\n      ],\r\n      inputMessage: '',\r\n      position: {\r\n        right: '30px',\r\n        bottom: '30px'\r\n      },\r\n      isDragging: false,\r\n      dragOffset: { x: 0, y: 0 },\r\n      isTyping: false,\r\n      inputRows: 1,\r\n      maxRows: 5\r\n    }\r\n  },\r\n  methods: {\r\n    toggleChat() {\r\n      this.isOpen = !this.isOpen\r\n      if (this.isOpen) {\r\n        this.$nextTick(() => {\r\n          this.$refs.inputArea?.focus()\r\n        })\r\n      }\r\n    },\r\n    getCurrentTime() {\r\n      const now = new Date()\r\n      return `${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}`\r\n    },\r\n    async typeMessage(message) {\r\n      this.isTyping = true\r\n      let displayText = ''\r\n      const words = message.split('')\r\n      \r\n      for (let i = 0; i < words.length; i++) {\r\n        displayText += words[i]\r\n        this.messages[this.messages.length - 1].content = displayText\r\n        await new Promise(resolve => setTimeout(resolve, 30 + Math.random() * 50))\r\n      }\r\n      this.isTyping = false\r\n    },\r\n    newLine(e) {\r\n      e.preventDefault()\r\n      this.inputMessage += '\\n'\r\n      this.adjustTextarea()\r\n    },\r\n    adjustTextarea() {\r\n      const textarea = this.$refs.inputArea\r\n      if (textarea) {\r\n        textarea.style.height = 'auto'\r\n        textarea.style.height = Math.min(textarea.scrollHeight, this.maxRows * 20) + 'px'\r\n        this.inputRows = Math.min(Math.floor(textarea.scrollHeight / 20), this.maxRows)\r\n      }\r\n    },\r\n    async sendMessage(e) {\r\n      if (e) e.preventDefault()\r\n      if (!this.inputMessage.trim() || this.isTyping) return\r\n\r\n      // 添加用户消息\r\n      const userMessage = this.inputMessage.trim()\r\n      this.messages.push({\r\n        content: userMessage.replace(/\\n/g, '<br>'),\r\n        type: 'sent',\r\n        time: this.getCurrentTime()\r\n      })\r\n\r\n      this.inputMessage = ''\r\n      this.adjustTextarea()\r\n      this.$nextTick(() => {\r\n        this.scrollToBottom()\r\n      })\r\n\r\n      // 添加空的AI回复消息\r\n      this.messages.push({\r\n        content: '',\r\n        type: 'received',\r\n        time: this.getCurrentTime()\r\n      })\r\n\r\n      // 模拟AI回复\r\n      const responses = [\r\n        `我理解你的问题是关于\"${userMessage}\"。让我来帮你解答。`,\r\n        '这是一个很好的问题！让我详细解释一���。',\r\n        '我明白你的意思了。这个问题的关键在于...',\r\n        '根据我的理解，你想知道的是...',\r\n        '这个问题很有趣！让我从以下几个方面来回答：'\r\n      ]\r\n      \r\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)]\r\n      await this.typeMessage(randomResponse)\r\n      \r\n      this.$nextTick(() => {\r\n        this.scrollToBottom()\r\n      })\r\n    },\r\n    scrollToBottom() {\r\n      const container = this.$refs.messageContainer\r\n      if (container) {\r\n        container.scrollTop = container.scrollHeight\r\n      }\r\n    },\r\n    startDrag(event) {\r\n      if (event.target.closest('.minimize-btn')) return\r\n      this.isDragging = true\r\n      const rect = this.$refs.chatWindow.getBoundingClientRect()\r\n      this.dragOffset = {\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top\r\n      }\r\n      document.addEventListener('mousemove', this.onDrag)\r\n      document.addEventListener('mouseup', this.stopDrag)\r\n    },\r\n    onDrag(event) {\r\n      if (!this.isDragging) return\r\n\r\n      const x = event.clientX - this.dragOffset.x\r\n      const y = event.clientY - this.dragOffset.y\r\n\r\n      // 计算相对于视窗的位置\r\n      this.position = {\r\n        left: `${Math.max(0, Math.min(x, window.innerWidth - 350))}px`,\r\n        top: `${Math.max(0, Math.min(y, window.innerHeight - 500))}px`\r\n      }\r\n    },\r\n    stopDrag() {\r\n      this.isDragging = false\r\n      document.removeEventListener('mousemove', this.onDrag)\r\n      document.removeEventListener('mouseup', this.stopDrag)\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener('mousemove', this.onDrag)\r\n    document.removeEventListener('mouseup', this.stopDrag)\r\n  },\r\n  mounted() {\r\n    // 添加键盘快捷键\r\n    document.addEventListener('keydown', (e) => {\r\n      if (e.ctrlKey && e.key === '/') {\r\n        e.preventDefault()\r\n        this.toggleChat()\r\n      }\r\n    })\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.chat-icon {\r\n  position: fixed;\r\n  right: 30px;\r\n  bottom: 30px;\r\n  width: 60px;\r\n  height: 60px;\r\n  background: white;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  transition: all 0.3s ease;\r\n  z-index: 1000;\r\n  padding: 10px;\r\n}\r\n\r\n.chat-icon:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.chat-window {\r\n  position: fixed;\r\n  width: 350px;\r\n  height: 500px;\r\n  background: white;\r\n  border-radius: 15px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  z-index: 1000;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chat-header {\r\n  padding: 15px 20px;\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  cursor: move;\r\n  user-select: none;\r\n}\r\n\r\n.header-left {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.header-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.minimize-btn {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  cursor: pointer;\r\n  padding: 5px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.minimize-btn:hover {\r\n  opacity: 0.8;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.message {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-bottom: 20px;\r\n  max-width: 100%;\r\n}\r\n\r\n.message.sent {\r\n  flex-direction: row-reverse;\r\n}\r\n\r\n.message-avatar {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.message-wrapper {\r\n  max-width: calc(100% - 46px);\r\n}\r\n\r\n.message-content {\r\n  padding: 12px 16px;\r\n  border-radius: 15px;\r\n  background: white;\r\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);\r\n  word-break: break-word;\r\n  line-height: 1.5;\r\n}\r\n\r\n.message.sent .message-content {\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n}\r\n\r\n.message-time {\r\n  font-size: 0.8em;\r\n  color: #666;\r\n  margin-top: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.chat-input {\r\n  padding: 15px;\r\n  background: white;\r\n  border-top: 1px solid #eee;\r\n  display: flex;\r\n  gap: 10px;\r\n  align-items: flex-end;\r\n}\r\n\r\n.chat-input textarea {\r\n  flex: 1;\r\n  padding: 10px 15px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  outline: none;\r\n  transition: all 0.3s ease;\r\n  resize: none;\r\n  min-height: 40px;\r\n  max-height: 120px;\r\n  line-height: 1.5;\r\n  font-size: 14px;\r\n}\r\n\r\n.chat-input textarea:focus {\r\n  border-color: var(--primary-color, #1a73e8);\r\n  box-shadow: 0 0 0 2px rgba(26, 115, 232, 0.1);\r\n}\r\n\r\n.chat-input button {\r\n  padding: 10px 15px;\r\n  background: var(--primary-color, #1a73e8);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  height: 40px;\r\n  min-width: 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.chat-input button:disabled {\r\n  background: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.chat-input button:not(:disabled):hover {\r\n  background: var(--primary-dark, #1557b0);\r\n  transform: translateX(2px);\r\n}\r\n\r\n.typing-indicator {\r\n  display: flex;\r\n  gap: 4px;\r\n  padding: 0 8px;\r\n}\r\n\r\n.typing-indicator span {\r\n  width: 4px;\r\n  height: 4px;\r\n  background: rgba(255, 255, 255, 0.7);\r\n  border-radius: 50%;\r\n  animation: typing 1s infinite ease-in-out;\r\n}\r\n\r\n.typing-indicator span:nth-child(1) { animation-delay: 0.2s; }\r\n.typing-indicator span:nth-child(2) { animation-delay: 0.3s; }\r\n.typing-indicator span:nth-child(3) { animation-delay: 0.4s; }\r\n\r\n@keyframes typing {\r\n  0%, 100% { transform: translateY(0); }\r\n  50% { transform: translateY(-5px); }\r\n}\r\n\r\n.mr-2 {\r\n  margin-right: 8px;\r\n}\r\n\r\n/* 滚动条样式 */\r\n.chat-messages::-webkit-scrollbar {\r\n  width: 6px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-track {\r\n  background: #f1f1f1;\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb {\r\n  background: #ccc;\r\n  border-radius: 3px;\r\n}\r\n\r\n.chat-messages::-webkit-scrollbar-thumb:hover {\r\n  background: #999;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}