{"ast":null,"code":"export default {\n  name: 'TableOfContents',\n  props: {\n    isDarkMode: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      tocItems: [],\n      activeId: '',\n      observer: null\n    };\n  },\n  mounted() {\n    this.initTOC();\n    this.initIntersectionObserver();\n    window.addEventListener('scroll', this.handleScroll);\n  },\n  beforeDestroy() {\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n    window.removeEventListener('scroll', this.handleScroll);\n  },\n  methods: {\n    initTOC() {\n      // 获取文章内容中的所有标题\n      const article = document.querySelector('.article-content');\n      if (!article) return;\n      const headings = article.querySelectorAll('h1, h2, h3, h4, h5, h6');\n      this.tocItems = Array.from(headings).map(heading => {\n        // 为每个标题添加id\n        const id = heading.textContent.toLowerCase().replace(/\\s+/g, '-');\n        heading.id = id;\n        return {\n          id,\n          text: heading.textContent,\n          level: parseInt(heading.tagName.charAt(1))\n        };\n      });\n    },\n    initIntersectionObserver() {\n      const options = {\n        rootMargin: '-70px 0px -70% 0px'\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            this.activeId = entry.target.id;\n          }\n        });\n      }, options);\n\n      // 观察所有标题元素\n      this.tocItems.forEach(item => {\n        const element = document.getElementById(item.id);\n        if (element) {\n          this.observer.observe(element);\n        }\n      });\n    },\n    scrollToHeading(id) {\n      const element = document.getElementById(id);\n      if (element) {\n        const offset = 80; // 头部导航栏的高度\n        const top = element.offsetTop - offset;\n        window.scrollTo({\n          top,\n          behavior: 'smooth'\n        });\n      }\n    },\n    handleScroll() {\n      // 处理目录固定定位\n      const toc = this.$el;\n      const scrollTop = window.pageYOffset;\n      const headerHeight = 60; // 头部导航栏高度\n\n      if (scrollTop > headerHeight) {\n        toc.style.position = 'fixed';\n        toc.style.top = '20px';\n      } else {\n        toc.style.position = 'absolute';\n        toc.style.top = `${headerHeight + 20}px`;\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","isDarkMode","type","Boolean","default","data","tocItems","activeId","observer","mounted","initTOC","initIntersectionObserver","window","addEventListener","handleScroll","beforeDestroy","disconnect","removeEventListener","methods","article","document","querySelector","headings","querySelectorAll","Array","from","map","heading","id","textContent","toLowerCase","replace","text","level","parseInt","tagName","charAt","options","rootMargin","IntersectionObserver","entries","forEach","entry","isIntersecting","target","item","element","getElementById","observe","scrollToHeading","offset","top","offsetTop","scrollTo","behavior","toc","$el","scrollTop","pageYOffset","headerHeight","style","position"],"sources":["src/components/TableOfContents.vue"],"sourcesContent":["<template>\r\n  <div class=\"toc-container\" :class=\"{ 'dark-mode': isDarkMode }\">\r\n    <div class=\"toc-header\">\r\n      <i class=\"el-icon-document\"></i>\r\n      目录\r\n    </div>\r\n    <div class=\"toc-content\">\r\n      <div v-for=\"(item, index) in tocItems\" \r\n           :key=\"index\" \r\n           class=\"toc-item\"\r\n           :class=\"{ \r\n             'active': activeId === item.id,\r\n             [`level-${item.level}`]: true \r\n           }\"\r\n           @click=\"scrollToHeading(item.id)\"\r\n      >\r\n        {{ item.text }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TableOfContents',\r\n  props: {\r\n    isDarkMode: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      tocItems: [],\r\n      activeId: '',\r\n      observer: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initTOC()\r\n    this.initIntersectionObserver()\r\n    window.addEventListener('scroll', this.handleScroll)\r\n  },\r\n  beforeDestroy() {\r\n    if (this.observer) {\r\n      this.observer.disconnect()\r\n    }\r\n    window.removeEventListener('scroll', this.handleScroll)\r\n  },\r\n  methods: {\r\n    initTOC() {\r\n      // 获取文章内容中的所有标题\r\n      const article = document.querySelector('.article-content')\r\n      if (!article) return\r\n\r\n      const headings = article.querySelectorAll('h1, h2, h3, h4, h5, h6')\r\n      this.tocItems = Array.from(headings).map(heading => {\r\n        // 为每个标题添加id\r\n        const id = heading.textContent.toLowerCase().replace(/\\s+/g, '-')\r\n        heading.id = id\r\n        \r\n        return {\r\n          id,\r\n          text: heading.textContent,\r\n          level: parseInt(heading.tagName.charAt(1))\r\n        }\r\n      })\r\n    },\r\n    initIntersectionObserver() {\r\n      const options = {\r\n        rootMargin: '-70px 0px -70% 0px'\r\n      }\r\n\r\n      this.observer = new IntersectionObserver(entries => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            this.activeId = entry.target.id\r\n          }\r\n        })\r\n      }, options)\r\n\r\n      // 观察所有标题元素\r\n      this.tocItems.forEach(item => {\r\n        const element = document.getElementById(item.id)\r\n        if (element) {\r\n          this.observer.observe(element)\r\n        }\r\n      })\r\n    },\r\n    scrollToHeading(id) {\r\n      const element = document.getElementById(id)\r\n      if (element) {\r\n        const offset = 80 // 头部导航栏的高度\r\n        const top = element.offsetTop - offset\r\n        window.scrollTo({\r\n          top,\r\n          behavior: 'smooth'\r\n        })\r\n      }\r\n    },\r\n    handleScroll() {\r\n      // 处理目录固定定位\r\n      const toc = this.$el\r\n      const scrollTop = window.pageYOffset\r\n      const headerHeight = 60 // 头部导航栏高度\r\n\r\n      if (scrollTop > headerHeight) {\r\n        toc.style.position = 'fixed'\r\n        toc.style.top = '20px'\r\n      } else {\r\n        toc.style.position = 'absolute'\r\n        toc.style.top = `${headerHeight + 20}px`\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.toc-container {\r\n  position: absolute;\r\n  top: 80px;\r\n  right: 40px;\r\n  width: 260px;\r\n  background: var(--bg-primary);\r\n  border-radius: 10px;\r\n  box-shadow: var(--card-shadow);\r\n  transition: var(--transition-normal);\r\n}\r\n\r\n.toc-header {\r\n  padding: 15px 20px;\r\n  font-weight: 600;\r\n  color: var(--text-primary);\r\n  border-bottom: 1px solid var(--bg-secondary);\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.toc-content {\r\n  max-height: calc(100vh - 200px);\r\n  overflow-y: auto;\r\n  padding: 15px 0;\r\n}\r\n\r\n.toc-item {\r\n  padding: 8px 20px;\r\n  cursor: pointer;\r\n  color: var(--text-secondary);\r\n  font-size: 0.9em;\r\n  transition: var(--transition-normal);\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.toc-item:hover {\r\n  color: var(--primary-color);\r\n  background: var(--bg-secondary);\r\n}\r\n\r\n.toc-item.active {\r\n  color: var(--primary-color);\r\n  background: var(--bg-secondary);\r\n  border-right: 2px solid var(--primary-color);\r\n}\r\n\r\n/* 目录层级缩进 */\r\n.level-1 { padding-left: 20px; }\r\n.level-2 { padding-left: 35px; }\r\n.level-3 { padding-left: 50px; }\r\n.level-4 { padding-left: 65px; }\r\n.level-5 { padding-left: 80px; }\r\n.level-6 { padding-left: 95px; }\r\n\r\n/* 滚动条样式 */\r\n.toc-content::-webkit-scrollbar {\r\n  width: 4px;\r\n}\r\n\r\n.toc-content::-webkit-scrollbar-track {\r\n  background: var(--bg-secondary);\r\n}\r\n\r\n.toc-content::-webkit-scrollbar-thumb {\r\n  background: var(--primary-color);\r\n  border-radius: 2px;\r\n}\r\n\r\n/* 深色模式 */\r\n.dark-mode {\r\n  background: var(--bg-primary);\r\n  box-shadow: var(--card-shadow);\r\n}\r\n\r\n@media (max-width: 1280px) {\r\n  .toc-container {\r\n    display: none;\r\n  }\r\n}\r\n</style> "],"mappings":"AAuBA;EACAA,IAAA;EACAC,KAAA;IACAC,UAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,OAAA;IACA,KAAAC,wBAAA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,YAAA;EACA;EACAC,cAAA;IACA,SAAAP,QAAA;MACA,KAAAA,QAAA,CAAAQ,UAAA;IACA;IACAJ,MAAA,CAAAK,mBAAA,gBAAAH,YAAA;EACA;EACAI,OAAA;IACAR,QAAA;MACA;MACA,MAAAS,OAAA,GAAAC,QAAA,CAAAC,aAAA;MACA,KAAAF,OAAA;MAEA,MAAAG,QAAA,GAAAH,OAAA,CAAAI,gBAAA;MACA,KAAAjB,QAAA,GAAAkB,KAAA,CAAAC,IAAA,CAAAH,QAAA,EAAAI,GAAA,CAAAC,OAAA;QACA;QACA,MAAAC,EAAA,GAAAD,OAAA,CAAAE,WAAA,CAAAC,WAAA,GAAAC,OAAA;QACAJ,OAAA,CAAAC,EAAA,GAAAA,EAAA;QAEA;UACAA,EAAA;UACAI,IAAA,EAAAL,OAAA,CAAAE,WAAA;UACAI,KAAA,EAAAC,QAAA,CAAAP,OAAA,CAAAQ,OAAA,CAAAC,MAAA;QACA;MACA;IACA;IACAzB,yBAAA;MACA,MAAA0B,OAAA;QACAC,UAAA;MACA;MAEA,KAAA9B,QAAA,OAAA+B,oBAAA,CAAAC,OAAA;QACAA,OAAA,CAAAC,OAAA,CAAAC,KAAA;UACA,IAAAA,KAAA,CAAAC,cAAA;YACA,KAAApC,QAAA,GAAAmC,KAAA,CAAAE,MAAA,CAAAhB,EAAA;UACA;QACA;MACA,GAAAS,OAAA;;MAEA;MACA,KAAA/B,QAAA,CAAAmC,OAAA,CAAAI,IAAA;QACA,MAAAC,OAAA,GAAA1B,QAAA,CAAA2B,cAAA,CAAAF,IAAA,CAAAjB,EAAA;QACA,IAAAkB,OAAA;UACA,KAAAtC,QAAA,CAAAwC,OAAA,CAAAF,OAAA;QACA;MACA;IACA;IACAG,gBAAArB,EAAA;MACA,MAAAkB,OAAA,GAAA1B,QAAA,CAAA2B,cAAA,CAAAnB,EAAA;MACA,IAAAkB,OAAA;QACA,MAAAI,MAAA;QACA,MAAAC,GAAA,GAAAL,OAAA,CAAAM,SAAA,GAAAF,MAAA;QACAtC,MAAA,CAAAyC,QAAA;UACAF,GAAA;UACAG,QAAA;QACA;MACA;IACA;IACAxC,aAAA;MACA;MACA,MAAAyC,GAAA,QAAAC,GAAA;MACA,MAAAC,SAAA,GAAA7C,MAAA,CAAA8C,WAAA;MACA,MAAAC,YAAA;;MAEA,IAAAF,SAAA,GAAAE,YAAA;QACAJ,GAAA,CAAAK,KAAA,CAAAC,QAAA;QACAN,GAAA,CAAAK,KAAA,CAAAT,GAAA;MACA;QACAI,GAAA,CAAAK,KAAA,CAAAC,QAAA;QACAN,GAAA,CAAAK,KAAA,CAAAT,GAAA,MAAAQ,YAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}